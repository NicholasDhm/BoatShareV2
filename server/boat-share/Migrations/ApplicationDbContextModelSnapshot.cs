// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using boat_share.Data;

#nullable disable

namespace boat_share.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("boat_share.Models.Boat", b =>
                {
                    b.Property<int>("BoatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BoatId"));

                    b.Property<int>("AssignedUsersCount")
                        .HasColumnType("integer");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BoatId");

                    b.ToTable("Boats");

                    b.HasData(
                        new
                        {
                            BoatId = 1,
                            AssignedUsersCount = 0,
                            Capacity = 6,
                            CreatedAt = new DateTime(2025, 8, 12, 12, 54, 21, 723, DateTimeKind.Utc).AddTicks(6830),
                            Description = "Beautiful 30ft sailing yacht perfect for day trips",
                            HourlyRate = 150.00m,
                            IsActive = true,
                            Location = "Marina Bay",
                            Name = "Ocean Explorer",
                            Type = "Sailing Yacht",
                            UpdatedAt = new DateTime(2025, 8, 12, 12, 54, 21, 723, DateTimeKind.Utc).AddTicks(6960)
                        },
                        new
                        {
                            BoatId = 2,
                            AssignedUsersCount = 0,
                            Capacity = 4,
                            CreatedAt = new DateTime(2025, 8, 12, 12, 54, 21, 723, DateTimeKind.Utc).AddTicks(7070),
                            Description = "Fast motor boat for thrilling water adventures",
                            HourlyRate = 200.00m,
                            IsActive = true,
                            Location = "Harbor Point",
                            Name = "Speed Demon",
                            Type = "Motor Boat",
                            UpdatedAt = new DateTime(2025, 8, 12, 12, 54, 21, 723, DateTimeKind.Utc).AddTicks(7070)
                        });
                });

            modelBuilder.Entity("boat_share.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("BoatId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ReservationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ReservationId");

                    b.HasIndex("UserId");

                    b.HasIndex("BoatId", "StartTime", "EndTime");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("boat_share.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int>("BoatId")
                        .HasColumnType("integer");

                    b.Property<int>("ContingencyQuota")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("StandardQuota")
                        .HasColumnType("integer");

                    b.Property<int>("SubstitutionQuota")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("BoatId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            BoatId = 1,
                            ContingencyQuota = 3,
                            CreatedAt = new DateTime(2025, 8, 12, 12, 54, 21, 894, DateTimeKind.Utc).AddTicks(9470),
                            Email = "admin@boatshare.com",
                            IsActive = true,
                            Name = "Admin User",
                            PasswordHash = "$2a$11$CVj7neFuB0D4y4EaF/rBTu6TuVBTUXnpVeU9mexzYEC/vqut3Qh1q",
                            Role = "Admin",
                            StandardQuota = 10,
                            SubstitutionQuota = 5,
                            UpdatedAt = new DateTime(2025, 8, 12, 12, 54, 21, 894, DateTimeKind.Utc).AddTicks(9630)
                        });
                });

            modelBuilder.Entity("boat_share.Models.Reservation", b =>
                {
                    b.HasOne("boat_share.Models.Boat", "Boat")
                        .WithMany()
                        .HasForeignKey("BoatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("boat_share.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Boat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("boat_share.Models.User", b =>
                {
                    b.HasOne("boat_share.Models.Boat", "Boat")
                        .WithMany()
                        .HasForeignKey("BoatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Boat");
                });
#pragma warning restore 612, 618
        }
    }
}
